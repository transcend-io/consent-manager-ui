// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/github/codespaces-nextjs
{
  "name": "Node.js & TypeScript",
  "image": "mcr.microsoft.com/devcontainers/typescript-node:18-bullseye",
  "hostRequirements": {
    "cpus": 4
  },
  "customizations": {
    "vscode": {
      // Add the IDs of extensions you want installed when the container is created.
      "extensions": [
        "dbaeumer.vscode-eslint",
        "divlo.vscode-styled-jsx-languageserver",
        "divlo.vscode-styled-jsx-syntax",
        "esbenp.prettier-vscode",
        "formulahendry.auto-rename-tag",
        "github.copilot-chat",
        "mikestead.dotenv",
        "ms-azuretools.vscode-docker",
        "unifiedjs.vscode-mdx",
        "unifiedjs.vscode-remark",
        "usernamehw.errorlens",
        "vscode-icons-team.vscode-icons",
        "wayou.vscode-todo-highlight"
      ]
    },
    "codespaces": {
      "openFiles": ["README.md"]
    }
  },
  // Define the port for the website
  "portsAttributes": {
    "8080": {
      "label": "Playground",
      "onAutoForward": "openBrowserOnce"
    }
  },
  "forwardPorts": ["localhost:8080"],

  // ** Container Creation **
  // This command is the first of three (along with updateContentCommand and postCreateCommand) that finalizes container setup when a dev container is created. It and subsequent commands execute inside the container immediately after it has started for the first time.
  // Cloud services can use this command when caching or prebuilding a container. This means that it will not typically have access to user-scoped assets or secrets.
  "onCreateCommand": "",
  // This command is the second of three that finalizes container setup when a dev container is created. It executes inside the container after onCreateCommand whenever new content is available in the source tree during the creation process.
  // It will execute at least once, but cloud services will also periodically execute the command to refresh cached or prebuilt containers. Like cloud services using onCreateCommand, it can only take advantage of repository and org scoped secrets or permissions.
  "updateContentCommand": "",
  // This command is the last of three that finalizes container setup when a dev container is created. It happens after updateContentCommand and once the dev container has been assigned to a user for the first time.
  // Cloud services can use this command to take advantage of user specific secrets and permissions.
  "postCreateCommand": "pre-commit install && . ${NVM_DIR}/nvm.sh && nvm install && nvm use && corepack enable && yarn install",

  // Comment out to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
  "remoteUser": "node",
  "features": {
    "ghcr.io/devcontainers/features/git:1": {
      "version": "latest",
      "ppa": "false"
    },
    "ghcr.io/devcontainers-contrib/features/pre-commit:1": {},
    "ghcr.io/devcontainers/features/node:1": {}
  }
}
